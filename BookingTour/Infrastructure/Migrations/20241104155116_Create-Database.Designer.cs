// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241104155116_Create-Database")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<int>("booking_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("booking_id"));

                    b.Property<DateTime>("booking_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int>("num_people")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("total_price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("tour_id")
                        .HasColumnType("int");

                    b.HasKey("booking_id");

                    b.HasIndex("customer_id");

                    b.ToTable("Bookings", null, t =>
                        {
                            t.HasCheckConstraint("CK_Booking_NumPeople", "[num_people] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customer_id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("customer_id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.Property<int>("destination_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("destination_id"));

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("destination_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("destination_id");

                    b.ToTable("Destinations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("employee_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("employee_id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.HasKey("employee_id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("feedback_id")
                        .HasColumnType("int");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<int>("tour_id")
                        .HasColumnType("int");

                    b.HasKey("feedback_id");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<int>("payment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("payment_id"));

                    b.Property<int>("booking_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("payment_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("payment_method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("payment_id");

                    b.HasIndex("booking_id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tour", b =>
                {
                    b.Property<int>("tour_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tour_id"));

                    b.Property<int>("availableSeats")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("end_Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("start_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("tour_name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("tour_id");

                    b.ToTable("Tours", null, t =>
                        {
                            t.HasCheckConstraint("CK_Tour_EndDate_StartDate", "[end_Date] >= [start_Date]");

                            t.HasCheckConstraint("CK_price", "[price] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.TourDestination", b =>
                {
                    b.Property<int>("tour_id")
                        .HasColumnType("int");

                    b.Property<int>("destination_id")
                        .HasColumnType("int");

                    b.Property<int>("tourDestination_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("visit_date")
                        .HasColumnType("datetime2");

                    b.HasKey("tour_id", "destination_id");

                    b.HasIndex("destination_id");

                    b.ToTable("TourDestinations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TourEmployee", b =>
                {
                    b.Property<int>("tour_id")
                        .HasColumnType("int");

                    b.Property<int>("employee_id")
                        .HasColumnType("int");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tour_id", "employee_id");

                    b.HasIndex("employee_id");

                    b.ToTable("TourEmployees", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Tour", "Tour")
                        .WithMany("FeedBacks")
                        .HasForeignKey("feedback_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("booking_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.TourDestination", b =>
                {
                    b.HasOne("Domain.Entities.Destination", "Destination")
                        .WithMany("TourDestinations")
                        .HasForeignKey("destination_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tour", "Tour")
                        .WithMany("TourDestinations")
                        .HasForeignKey("tour_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Domain.Entities.TourEmployee", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("TourEmployee")
                        .HasForeignKey("employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tour", "Tour")
                        .WithMany("TourEmployees")
                        .HasForeignKey("tour_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.Navigation("TourDestinations");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("TourEmployee");
                });

            modelBuilder.Entity("Domain.Entities.Tour", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("TourDestinations");

                    b.Navigation("TourEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
